#아이폰 개발 공부하기
2021년 01월 06일

#주제 - 스위프트 기본 문법 #야곰

15강 값 타입과 참조 타입

//class
- 전통적인 OOP 관점에서의 클래스는
- 단일 상속
- (인스턴스/타입) 메서드
- (인스턴스/타입) 프로퍼티
- 참조 타입
- Apple 프레임워크의 대부분의 큰 뼈대는 모두 클래스로 구성

//Struct(구조체)
- C언어 등의 구조체보다 다양한 기능
- 상속 불가
- (인스턴스/타입) 메서드
- (인스턴스/타입) 프로퍼티
- 값 타입
- Swift의 대부분의 큰 뼈대는 모드 구조페로 구성

//Enum(열거형)
- 다른 언어의 열거형과는 많이 다른 존재
- 상속 불가
- (인스턴스/타입) 메서드
- (인스턴스/타입) 연산 프로퍼티
- 값 타입
- Eunmeration
- 유사한 종류의 여러 값을 유의미한 이름으로 한 곳에 모아 정의
  예) 요일, 상태값 ,월(Month) 등
- 열거형 자체가 하나의 데이터 타입
  열거형의 case 하나하나 전부 하나의 유의미한 값으로 취급
- 선언 키워드 - enum


// 구조체와 클래스랑 별반 다를게 없는 것 같은데
// 구조체는 언제 사용해야 할까?

- 연관된 몇몇의 값들을 모아서 하나의 데이터 타입으로 표현하고 싶을 때
- 다른 객체 또는 함수 등으로 전달될 때 참조가 아닌 복사를 원할 때
- 자신을 상속할 필요가 없거나, 자신이 다른 타입을 상속받을 필요가 없을 때
- Apple 프레임워크에서 프로그래밍을 할 때에는 주로 클래스를 많이 사용


// Value(값) vs Reference(참조)

1. Value (값)
 - 데이터를 전달할 때 값을 복사하여 전달

2. Reference (참조)
 - 데이터를 전달할 때 값의 메모리 위치를 전달



/* 클래스, 구조체/열거형 비교 */

//MARK: - Class vs Struct/Enum

struct ValueType {
    var property = 1
}

class ReferenceType {
    var property = 1
}

let firstStructInstance = ValueType()
var secondStructInstance = firstStructInstance
secondStructInstance.property = 2

print("first struct instance property : \(firtstStructInstance.property)")    // 1 // 위에서 미리 넣어둔 값 1이 들어온다
print("second struct instance property : \(secondStructInstance.property)")   // 2 // 위에서 추가로 넣어진 2가 들어온다


let firstClassReference = ReferenceType()
var secondClassReference = firstClassReference
secondClassReference.property = 2

print(first class reference property : \(firstClassReference.property)")      // 2 // 미리 넣어둔 값이 아니라 참조 값이 들어온다
print(second class reference property : \(econdClassReference.property)")     // 2



////문제////

문제1

struct SomeStruct {
    var someProperty: String = "Property"
}

var someStructInstanece: SomeStruct = SomeStruct()

func someFunction(structInstance: SomeStruct) {
    var localVar: SomeStruct = structInstance
    localVar.someProperty = "ABC"
}

someFunction(someStructInstance)
print(someStructInstance.someProperty)

///답 : property



문제2

class SomeClass {
    var someProperty: String = "property"
}

var someClassInstance: SomeClass = someClass()

func someFunction(classInstance: SomeClass) {
    var localVar: SomeClass = classInstance
    localVar.someProperty = "ABC"
}

someFunction(someClassInstance)
print(someClassInstance.someProperty)

//답 : ABC





// 스위프트의 데이터 타입

public struct Int

public struct Double

public struct String

public struct Dictionary<Key : Hashable, Value>

public struct Array<Element>

public struct Set<Element : Hashable>

// 위의 모든 데이터 타입은 struct(구조체)로 되어있다

// 스위프트는 구조체, 열거형 사용을 선호한다
// Apple 프레임워크는 대부분 클래스를 사용한다
// Apple 프레임워크 사용시 구조체/클래스 사용의 선택은 우리의 몫이다