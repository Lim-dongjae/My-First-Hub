#아이폰 개발 공부하기
2021년 01월 14일

#주제 - 스위프트 기본 문법 #야곰

21강 인스턴스의 생성과 소멸


/* 인스턴스 생성과 소멸*/

// 이니셜라이저와 디이니셜라이저
// init, deinit

import Swift

//MARK: - 프로퍼티 기본값

// 스위프트의 모든 인스턴스는 초기화와 동시에
// 모든 프로퍼티에 유효한 값이 할당되어 있어야 한다
// 프로퍼티에 미리 기본값을 할당해두면
// 인스턴스가 생성된과 동시에 초기값을 지니게 된다


class PersonA {
    // 모든 저장 프로퍼티에 기본값 할당
    var name: String = "unknown"
    var age: Int = 0
    var nickName: String = "nick"
}

let jason: PersonA = PersonA()
jason.name = "jason"
jason.age = 30
jason.nickName = "j"

//MARK: - 이니셜라이저

// 프로퍼티 기본값을 지정하기 어려운 경우에는
// 이니셜라이저를 통해
// 인스턴스가 가져야 할 초기값을 전달할 수 있다

class PersonB {
    var name: String
    var age: Int
    var nickName: String

    //이니셜라이저
    init(name: String, age: Int, nickName: String) {
        self.name = name
        self.age = age
        self.nickName = nickName
    }
}

let hana: PersonB = PersonB(name: "hana", age: 20, nickName: "하나")

//let hana: PersonB = PersonB(name: "hana", age: 20, nickName: "")  <- 닉네임이 없는 경우가 있음
//MARK: 프로퍼티의 초기값이 꼭 필요 없을 때
// 옵셔널을 사용한다!

class PersonC {
    var name: String
    var age: Int
    var nickName: String?

    init(name: String, age: Int, nickName: String) {
        self.name = name
        self.age = age
        self.nickName = nickName
    }

    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
    // 위와 같이 var nickName: String에 ?인 옵셔널을 추가해 닉네임이 없어도 된다고 표시하고
    // 이니셔라이저를 각각 닉네임이 있는 것과 없는 것을 2개 생성하여 사용하면 된다
    // 하지만 이 때 겹치는 코드가 많아질 수 있기 때문에
    // 중복되는 이니셜라이저 사용할 수 있다
    // 그렇게 사용한다면 코드는 아래와 같이 변한다

    // init(name: String, age: Int, nickName: String) {
    //    self.init(name: name, age: age)
    //    self.nickName = nickName
    // }

    // 하지만 이렇게되면 오류가 발생한다
    // 자신의 이니셜 라이저를 사용할 때는 convenience 라는 코드를 추가해줘야한다 이는 편의 이니셜라이저라고 한다.
    // 추가하면 아래와 같은 코드가 된다

    // convenience init(name: String, age: Int, nickName: String) {
    //    self.init(name: name, age: age)
    //    self.nickName = nickName
    // }
}

// 위와 같이 이니셜라이저를 사용한다면 아래와 같이 다양한 모습들로 사용할 수 있게된다.

let jenny: PersonC = PersonC(name: "jenny", age: 10)
let mike: PersonC = PersonC(name: "mike", age: 15, nickname: "m")



// 암시적 추출 옵셔널은
// 인스턴스 사용에 꼭 필요하지만
// 초기값을 할당하지 않고자 할 때 사용한다

class Puppy {
    var name: String
    var owner: PersonC!

    init(name: String) {
        self.name = name
    }

    func goOut() {
        print("\(name)가 주인 \(owner.name)와 산책을 합니다")
    }
}

let happy: Puppy = Puppy(name: "happy")
//happy.goOut() <- 아직 암시적 이니셜라이저의 값이 들어오지 않았기 떄문에 오류가 발생한다.
happy.owner = jenny
happy.goOut()
// happy가 주인 jenny와 산책을 합니다


//MARK: 실패 가능한 이니셜라이저
// 이니셜라이저 매개변수로 전달되는 초기값이 잘못된 걍우
// 인스턴스 생성에 실패할 수 있다
// 인스턴스 생성에 실패하면 nil을 반환한다
// 그래서 실패 가능한 이니셜라이저의 반환타입은 옵셔널 타입이다

class PersonD {
    var name: String
    var age: Int
    var nickName: String?

    init?(name: String, age: Int) {
        if (0...120).contains(age) == false {
            return nil
        }

        if name.characters.count == 0 {
            return nil
        }

        self.name = name
        self.age = age
    }
}

//let john: PersonD = PersonD(name: "john", age: 23) <- PersonD는 실패 가능한 이니셜라이저이기 때문에 반환값인 PersonD에 ?인 옵셔널을 추가해줘야 한다
let john: PersonD? = PersonD(name: "john", age: 23)
let joker: PersonD? = PersonD(name: "joker", age: 123)
let batman: PersonD? = PersonD(name: "", age: 10)

print(joker) // nil
print(batman)  // nil


//MARK: - 디이니셜아니저

// deinit은 클래스의 인스턴스가
// 메모리에서 해제되는 시점에 호출된다
// 인스턴스가 해제되는 시점에 해야할 일을 구현할 수 있다

class PersonE {
    var name: String
    var pet: Puppy?
    var child: PerconC

    init(name: String, child: PersonC) {
        self.name = name
        self.child = child
    }

    deinit {
        if let petName = pet?.name { // <- 만약 사람이 강아지를 키우고 있는 상태라면 이라고 해석한다
            print("\(name)가 \(child.name)에게 \(petName)을 인도합니다")
            self.pet?.owner = child
        }
    }
}

var donald: PersonE? = PersonE(name: "donald", child: jenny)
donald?.pet = happy
donald = nil // donald 인스턴스가 더 이상 필요 없어져 메모리에서 해제되었다
// donald가 jenny에게 happy를 인도합니다