#아이폰 개발 공부하기
2021년 01월 05일

#주제 - 스위프트 기본 문법 #야곰

11강 옵셔널 값 추출

#요약 정리
옵셔널 추출 방법에는 2가지 방법이 있다.
1. Optional Binding - 옵셔널 바인딩
 -> nil 체크 + 안전한 값 추출

2. Force Unwrapping - 강제 추출
 -> 옵셔널의 값을 강제로 추출




1. Optional Binding - 옵셔널 바인딩

func printName(_ name: String) {
    print(name)
}

var myName: String? = nil

printName(myName)
// 전달되는 값의 타입이 다르기 떄문에 컴파일 오류발생



func printNmae(_ name: String) {
    print(name)
}

var myName: String! = nil

if let name: String = myName {
    printName(name)
} else {
    print("myName == nil")
}

// name 상수는 if-let 구문 내에서만 사용이 가능하다
// 상수 사용범위를 벗어났기 때문에 컴파일 오류가 발생한다
printNmae(name)



var myName: String? = "dongjae"
var yourName: String? = nil

if let name = myName, let friend = yourName {
    print("\(name) and \(friend)")
}
// yourName이 nil이기 떄문에 실행되지 않는다

yourName = "seonghui" // <- 여기서 yourNmae을 선언해준뒤 다시 실행하면 작동된다.

if let name = myName, let friend = yourName {
    print("\(name) and \(friend)")
}
// dongjae and seonghui




2. Force Unwrapping - 강제 추출

func printNmae(_ name: String) {
    print(name)
}

var myName: String? = "dongjae"

printName(myName!) // 강제 추출을 위해 myName에 "!"를 붙여 값을 강제로 불러온다
// dongjae
// 만약 myName 의 값이 nil 이라면 강제 추출 시 값이 없으므로 런타임 오류가 발생한다

var yourName: String! = nil // 암시적 추출 옵셔널은 처음 선언할 때 부터 강제 추출을 가정하고 선언하는 것이기 떄문에
                            // 아래 printNmae(yourNmae)에 !를 붙여준 것과 같은 효과를 갖는다

printNmae(yourName)
// nil 값이 전달되기 떄문에 런타임 오류발생

// 여태 설명한대로 옵셔널 강제추출 방식은 추천되는 방식은 아니다
// 조금 더 안전하게 옵셔널을 사용하기 위해선 옵셔널 바인딩 방식을 사용하는 것이 좋다.